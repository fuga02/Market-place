@page "/chats/{ConversationId}"
@using ChatBlazor.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.LocalStorage
@using MarketPlace.ChatBlazor.Models.ChatModels
@using MarketPlace.ChatBlazor.Models.IdentityModels
@using MarketPlace.ChatBlazor.Pages.Identity

@inject ILocalStorageService Storage    
@inject ConversationService ConversationsService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@implements IAsyncDisposable
<h3>Chats</h3>



<h3>Chat</h3>
<h3>Username : @ConversationId</h3>

<div>
    
    @{
        foreach (var message in messages! )
        {
            <h3>@message.Text</h3>
            <h6>@message.CreatedDate.ToString()</h6>
        }
    }
</div>

<form>
    <input class="form-control" type="text" @bind-value="messageText"  placeholder="message"/>
    <button type="button" class="btn btn-primary form-control" @onclick="(async() => await SendMessage())" ></button>
</form>



<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 500px;">
    @{
        if (!messages.Any())
        {
            <p> No messages yet, start chatting</p>
        }
        foreach (var message in messages)
        {
            <div class="row mb-3 d-flex @(message.FromUserId != currentUser  ? "justify-content-end " : "" )">
                <div class="card shadow" @(message.FromUserId !=currentUser ? "color-green mr-5 " : "" ) style="width: 18rem">
                    <div class="card-header">
                        @(message.FromUserId == currentUser ? "You" : message.FromUserId)
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">@message.Text</li>
                    </ul>
                    <div class="card-footer">
                        <span class="small">
                            @message.CreatedDate.ToString("HH:mm | MMM dd")
                        </span>
                    </div>
                </div>
            </div>
        }
    }
    

</div>



<div class="container">
    @*
    <div class="col-3">
        <input @bind="usernameInput" type="text" class="form-control" placeholder="Your name" readonly="@_isUserReadOnly" />
    </div>*@
    <div class="col-6">
        <textarea @bind="messageText" class="form-control" placeholder="Start typing ..." ></textarea>
    </div>

    <div class="col-3">
        <button type="button" @onclick="(async () => await SendMessage())" class="btn btn-primary">Send</button>
    </div>

</div>










@code
{
    private HubConnection? _hubConnection;

    private List<MessageModel>? messages = new List<MessageModel>();
    private string messageText { get; set; }
    [Parameter]
    public string? ConversationId { get; set; }

    public Guid currentUser;
    private bool _isUserReadOnly = false;

    protected override async Task OnInitializedAsync()
    {
        messages = await ConversationsService.Get<List<MessageModel>>($"/chat/swagger/api/Conversations/{ConversationId}");
        await ConnectToHub();
    }

    private async Task ConnectToHub()
    {
        var token = await Storage.GetItemAsStringAsync("token");

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"http://localhost:7072/chat/hubs/conversation?token={token}"))
            .Build();

        _hubConnection.On<MessageModel>("NewMessage", model =>
        {
            messages.Add(model);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task SendMessage()
    {
        var token = await Storage.GetItemAsStringAsync("token");

        var request = new HttpRequestMessage(HttpMethod.Post, "/chat/swagger/api/Conversations");
        request.Headers.Add("Authorization", $"Bearer {token}");
        request.Content = JsonContent.Create(new NewMessageModel()
        {
            Text = messageText,
            ToUserId = messages![0].FromUserId
        });
        await Http.SendAsync(request);
        _isUserReadOnly = true;
        messageText = string.Empty;
    }

    


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}