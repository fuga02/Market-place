@page "/register"
@inject HttpClient Http
<h3>Register</h3>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ChatBlazor.Models

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Name" Required="true" @bind-value ="createUser.Name" RequiredError="Name is required!" />
                <MudTextField T="string" Label="Username" Required="true" @bind-value="createUser.Username" RequiredError="User name is required!" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @bind-value="createUser.Password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password"   InputType="InputType.Password"
                              @bind-value="createUser.ConfirmPassword"  Validation="@(new Func<string, string>(PasswordMatch))" />
                <div class="d-flex">
                    <MudRadioGroup T="string" Required="true"   RequiredError="Account type is required!">
                    </MudRadioGroup>
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" @onclick="LoginAccount" Class="ml-auto">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
    private CreateUserModel createUser = new CreateUserModel();
    private async Task LoginAccount()
    {
        await Http.PostAsJsonAsync("/api/Account/register", createUser);
    }

}